; (function ($, k, l, m) { var n = 'itemslist'; function Plugin(a, b) { this.element = $(a); this._init(b) }; Plugin.prototype = { _getPageOfItems: function (a, b, c, d, e) { var f = [window.location.protocol, '//', window.location.host, window.location.pathname].join(''); var g = Math.floor(Math.random() * 100000); var h = window.History; if (h.enabled) { var i = h.getCurrentIndex(); if (this.settings.useHistory) { h.pushState({ skipCount: a, maxItems: b, filters: c, sortCriterium: d, initPaginator: e, index: i }, null, f + '?' + $.param({ skipCount: a, maxItems: b, filters: c, sortCriterium: d, reload: g })) } else { h.replaceState({ skipCount: a, maxItems: b, filters: c, sortCriterium: d, initPaginator: true, index: i }, null, f + '?' + $.param({ skipCount: a, maxItems: b, filters: c, sortCriterium: d, reload: g })); if (!this.settings.usePaginator) { } } } else { this._loadPageOfItems(a, b, c, d, e) } }, _loadPageOfItems: function (d, e, f, g, h) { this.settings.onBeginLoadItems(); this.loadSkipCount = d; this.loadMaxItems = e; this.loadFilters = f; this.loadSortCriterium = g; var i = this; var j = { skipCount: d, maxItems: e, filters: f, sortCriterium: g }; $.ajax({ url: this.settings.listUrl, cache: false, dataType: "html", traditional: true, data: j, success: function (a) { i.element.html(a); if (i.settings.usePaginator) { i.settings.totalItemsCount = $(i.settings.totalNrOfItemsElement).val(); if (h) { var b = d / e; i.settings.onInitPaginator(i.settings.totalItemsCount, b) } j.totalItemsCount = i.settings.totalItemsCount } i.settings.onEndLoadItems(false, j, null); if (i.settings.usePaginator) { var c = $(i.settings.displNrOfItemsElement).val(); if (c == 0 && d != 0) { i._getPageOfItems(d - e, e, f, g, true) } } }, error: function (a, b, c) { if (i.settings.usePaginator) { j.totalItemsCount = 0 } i.settings.onEndLoadItems(true, j, a.responseText) } }) }, _init: function (e) { var f = this; var g = { listUrl: '/umbraco/surface/ItemsArchive/GetItems', reqFilters: null, reqSortCriterium: null, useHistory: false, onBeginLoadItems: function () { }, onEndLoadItems: function (a, b, c) { }, usePaginator: true, maxItems: 100, reqSkipCount: 0, displNrOfItemsElement: '#displNrOfItems', totalNrOfItemsElement: '#totalNrOfItems', onInitPaginator: function (a, b) { } }; this.settings = $.extend(g, e || {}); this.settings.totalItemsCount = 0; var h = window.History; if (h.enabled) { h.Adapter.bind(window, 'statechange', function () { var a = h.getState(); if (a.data.skipCount !== m) { f.settings.reqSkipCount = a.data.skipCount; f.settings.reqSortCriterium = a.data.sortCriterium; f.settings.reqFilters = a.data.filters; var b = this.settings.usePaginator; if (a.data.index >= 0) { var c = h.getCurrentIndex(); var d = (a.data.index == (c - 1)); if (d) { b = a.data.initPaginator } else { b = true } f._loadPageOfItems(f.settings.reqSkipCount, f.settings.maxItems, f.settings.reqFilters, f.settings.reqSortCriterium, b) } } else { } }); var i = [window.location.protocol, '//', window.location.host, window.location.pathname].join(''); var j = Math.floor(Math.random() * 100000); h.replaceState({ skipCount: this.settings.reqSkipCount, maxItems: this.settings.maxItems, filters: this.settings.reqFilters, sortCriterium: this.settings.reqSortCriterium, initPaginator: this.settings.usePaginator, index: 0 }, null, i + '?' + $.param({ skipCount: this.settings.reqSkipCount, maxItems: this.settings.maxItems, filters: this.settings.reqFilters, sortCriterium: this.settings.reqSortCriterium, reload: j })) } else { this._loadPageOfItems((f.settings.usePaginator) ? f.settings.reqSkipCount : 0, (f.settings.usePaginator) ? f.settings.maxItems : 0, f.settings.reqFilters, f.settings.reqSortCriterium, this.settings.usePaginator) } }, setListParms: function (a) { var b = a[0]; this.settings.maxItems = b.maxItems; this.settings.reqFilters = b.reqFilters; this.settings.reqSortCriterium = b.reqSortCriterium }, getItems: function (a) { var b = a[0]; this._getPageOfItems(b.skipCount, this.settings.maxItems, this.settings.reqFilters, this.settings.reqSortCriterium, b.initPaginator) }, reloadItems: function (a) { this._getPageOfItems(this.loadSkipCount, this.loadMaxItems, this.loadFilters, this.loadSortCriterium, true) } }; $.fn[n] = function (a) { var b = $(this).data(n); if (b && a.indexOf('_') != 0) { return b[a](Array.prototype.slice.call(arguments, 1)) } if (typeof a === 'object' || !a) { b = new Plugin(this, a); $(this).data(n, b); return $(this) } $.error('Wrong call to ' + n) } })(jQuery);